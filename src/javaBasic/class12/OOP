**객체 지향 언어의 원리와 목적

다형성이 가장 중요하다.
역할과 구현을 분리해야한다.
역할 --> 자동차       ,        구현 ---> K3 , Tesla 등등..
클라이언트가 서버에 요청할때 클라이언트가 변경 되는것이 아닌 서버쪽에서 변경이 일어나게 해야한다.
ex) 운전자가 자동차를 탈 줄 알때 K3 에서 테슬라가 된다고 해서 처음부터 다시 배워야 하는것은 아니다.

------------------------------------------------------------------------------------------------------------------------------------------------
OCP 원칙 :
Open for extension : 새로운 기능을 추가 하거나 변경할 떄 기존 코드는 확장 할 수 있어야한다.
Closed for modification : 기존의 코드는 수정되지 않아야 한다.

Ex) Car의 인터페이스 에는 새로운 종류의 차량을 게속 추가 할 수 있지만 , 이 차를 운전하는 Driver 클래스에서는 아무런 변화를 갖지 않는다.

이와 같이 클라이언트 코드인 Driver 의 코드는 변경하지 않고 서버의 코드인 Car의 부분에서 변경이 이루어져야한다.

------------------------------------------------------------------------------------------------------------------------------------------------

ex2 에서의 Pay 과정 코드의 간결화와 방식 분리 복습 요망.
