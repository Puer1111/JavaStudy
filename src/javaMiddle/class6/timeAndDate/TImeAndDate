** 날짜 & 시간

24.1.1 ~ 24.2.1 은 몇일일까 월마다 날짜가 다르기에 계산이 정확해야함
2월 29일이 있는 윤년도 추가해야한다.

윤년은 100년 단위에는 윤년이 아니며, 400년 단위에는 윤년이다

** 일광절약 시간
3월~10월은 태양이 일찍 뜨고 그 외에는 늦게 뜬다 이에 따라 시간을 당기거나 늦추는걸 일광절약 Or 썸머타임이라고 한다.

**타임존 (UTC)
세계에 따른 날짜와 시간차이.

썸머타임에 따른 타임존의 차이도 바뀐다.
------------------------------------------------------------------------------------------------------------------------------------------------------
LocalDate : 날짜만 표현
LocalTime : 시간만 표현
LocalDateTime : LocalDate + LocalTime

--> 국내 서비스 개발 시에 사용

ZonedDateTime : 시간대를 고려한 날짜 & 시간 표현 -> 타임존 포함 ex) 2013-11-21T08:20:30 . 213+9:00[Asia/Seoul]
오프셋은 UTC로 부터 시간대 차이다. 한국은 UTC + 9:00
OffsetDateTime : 시간대를 고려한 날짜 & 시간 표현 -> 타임존 미포함 오프셋만 고정.
※썸머타임 적용 X

---> 썸머타임을 알려면 타임존을 알아야한다. 따라서 ZonedDateTime 은 썸머타임을 함께 처리한다. 썸머타임 고려를 해야 안하냐에 따라 적합함을 나타낸다.

Year,Month,YearMonth,MonthDay : 년,월,년월,달일 을 나타낸다
DayOfWeek: 요일을 나타낸다.

Instant :UTC 기준 1970년 1월 1일 0시0분0초 이후로부터 경과한 시간을 나타낸다. 초 데이터로만 들어가있다.
--> 기준이 1970 1.1. 0:00:00 이유? 에포크 시간(Unix timeStamp) 즉 컴퓨터 시스템에서 시간을 나타내는 방법중 하나이다. Unix 시간은 절대적인 시간 표현 방식.
--> 장점: 어디서나 동일한 시점을 가리킴. 시간 계산 및 비교 명확.
--> 단점: 사용자 친화적이지 않음. 사람이 읽고 이해하기 직관적이지 않다. 시간대 정보가 없어서 추가 작업 필요함.

Period : 두 날짜 사이의 간격을 년,월.일 로 나타낸다.
Duration: 두 시간 사이의 간격을 시,분,초 로 나타낸다.

isBefore(): 다른 날짜시간과 비교한다 현재 날짜와 시간이 이전이라면 True.
isAfter(): 다른 날짜시간과 비교한다 현재 날짜와 시간이 이후라면 True.
isEquals(): 다른 날짜시간과 시간적으로 동일한지 비교. 시간이 같으면 True.  --> 단순히 시간적으로 같으면 True다 객체가 다르고 타임존이 달라도 시간이 같으면 True.


------------------------------------------------------------------------------------------------------------------------------------------------------
ChronoUnit & ChronoField

ChronoUnit 은 말그대로 단위다 시간에 대한 단위들이 포함됨.

ChronoField은 날짜 및 시간을 나타낼떄 사용되는 열거형이다. 연도,월,시간,분등등 포함.
ex) 2024년 8월 16일 --> YEAR: 2024 , MONTH_OF_YEAR : 8 , DAY_OF_MONTH : 16
월은 년도에서 쪼개진거고 일은 월에서 쪼개진거다.
------------------------------------------------------------------------------------------------------------------------------------------------------
**TemporalAdjuster

단순한 날짜 변경은 with() 메서드를 통해서 바꿀수 있지만 먼 날짜나 다음주 금요일, 이번달 마지막 일요일 같은 복잡한 계산은 TemporalAdjusters 를 사용하면 편하다
ex) // 다음주 금요일 계산
LocalDateTime with1 = dt.with(TemporalAdjusters.next(DayOfWeek.FRIDAY));

** 포맷팅
날짜와 시간 데이터를 원하는 포맷의 문자열로 변경 Date -> String
