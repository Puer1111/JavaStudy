Method: Class 정보를 보관하는 영역 -> 클래스 실행 코드 , 필드 ,메소드 등 모든 실행 코드 존재.
Method -> static 영역 존재. static 변수들을 보관함.

static 의 경우 멤버변수 OR 메소드에 사용.

------------------------------------------------------------------------------------------------------------------------------------------

Stack: 실제 코드가 실행 되는 영역 , 실행 시 하나의 실행 스택(main) 프레임 생성, 프레임에는 지역변수 , 연산결과 , 메소드 호출 정보등을 포함. 메소드가 종료 되면 프레임도 제거.
스택은 각 쓰레드 별로 하나의 실행 스택 생성. 쓰레다 수만큼 스택 영역 생성.

Stack 은 Stack 구조와 Queue 구조로 나뉨.
Stack은 위만 열려 있기에 LIFO의 형태이다. 1->2->3 으로 들어가면 3->2->1로 나와야함.
Queue의 경우는 FIFO이다. 위아래가 뚫린 구조로  1->2->3 으로 들어가면 1->2->3 으로 나감.

각 구조마다 사용 영역이 있다. ex) 선착순 이벤트를 생성할 경우 Queue 를 사용해야 한다.

프로그램 실행과 메소드 호출에는 스택이 적합하다.

------------------------------------------------------------------------------------------------------------------------------------------

Heap: 객체, 배열이 저장되는 영역 , GC의 주요 영역으로 참조되지 않으면 GC에 의해 제거된다.
객체를 100개 만들면 힙 메모리에 100개의 객체가 생김. 각 객체는 내부에 변수와 메소드를 가짐. 같은 클래스로부터 생성된 객체여도 객체 내부의 변수 값은 다를 수 있다. 메소드는 "공통" 되기에 공유된다.
ex) item 클래스를 item1 , item2 만든다 해서 getTotalAmount() 같은 메소드를 각 객체마다 가져가지 않는다. 공통되기에 메모리 낭비.

------------------------------------------------------------------------------------------------------------------------------------------
